# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
parameters: 
  - name: subscription
    type: string

  - name: endpointVirtualNetwork
    type: string
    default: 'OnPremConnect-vNet'

  - name: endpointVirtualNetworkSubnet
    type: string
    default: '192.168.1.0_24'
  
  - name: dnssuffix
    type: string
    default: '.test.zone'
     
  - name: dc
    displayName: Deploy DC?
    type: boolean
    default: true

  - name: srv
    displayName: Deploy SRV?
    type: boolean
    default: true

  - name: RunRegisterDNS
    displayName: Register DNS records?
    type: boolean
    default: true

trigger: none


pool:
  vmImage: windows-latest

stages:
  - stage: deployinfra
    jobs:
      - job: ARMDeploy
        displayName: "Deploy environment through ARM"
        steps:
          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              deploymentScope: 'Subscription'
              azureResourceManagerConnection: 'MCT'
              subscriptionId: ${{ parameters.subscription }}
              location: 'West Europe'
              templateLocation: 'Linked artifact'
              csmFile: 'arm/rg.json'
              deploymentMode: 'Incremental'
              deploymentOutputs: armOutputString
              deploymentName: 'CreateRG'

          - task: PowerShell@2
            name: ParseParams
            inputs:
              filePath: 'scripts/ReadOutputParameters.ps1'
              arguments: '-armOutputString ''$(armOutputString)'''

          - task: AzurePowerShell@5
            inputs:
              azureSubscription: 'MCT'
              ScriptType: 'InlineScript'
              Inline: |
                $subnetId = (Get-AzVirtualNetwork -name ${{ parameters.endpointVirtualNetwork }} | Get-AzVirtualNetworkSubnetConfig -name ${{ parameters.endpointVirtualNetworkSubnet }}).Id
                Write-Output "##vso[task.setvariable variable=subnetId]$subnetId"
                Write-Output $subnetId
              azurePowerShellVersion: 'LatestVersion'

          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: 'MCT'
              subscriptionId: ${{ parameters.subscription }}
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(ParseParams.Output_rgname)'
              location: 'West Europe'
              templateLocation: 'Linked artifact'
              csmFile: 'arm/virtualnetwork.json'
              overrideParameters: '-guid $(ParseParams.Output_guid)'
              deploymentMode: 'Incremental'

          - ${{ if eq(parameters.dc, true) }}:
            - template: azure-pipeline-template-vm.yml
              parameters:
                vmName: 'dc'
                vmIndex: '10'
                imageGallery: 'BoxImages'
                subscription: ${{ parameters.subscription }}
                rgname: '$(ParseParams.Output_rgname)'
                guid: '$(ParseParams.Output_guid)'
                subnetId: '$(subnetId)'

          - ${{ if eq(parameters.srv, true) }}:
            - template: azure-pipeline-template-vm.yml
              parameters:
                vmName: 'srv'
                vmIndex: '11'
                imageGallery: 'BoxImages'
                subscription: ${{ parameters.subscription }}
                rgname: '$(ParseParams.Output_rgname)'
                guid: '$(ParseParams.Output_guid)'
                subnetId: '$(subnetId)'

          - task: AzurePowerShell@5
            inputs:
              azureSubscription: 'MCT'
              ScriptType: 'InlineScript'
              Inline: |
                $VmPublicIpAddress = @{}
                $objVMs = @()
                $dnszone = '.' + '$(ParseParams.Output_guid)' + '${{ parameters.dnssuffix }}'
                $RG = Get-AzResourceGroup -ResourceGroupName $(ParseParams.Output_rgname)
                $vnet = Get-AzVirtualNetwork -ResourceGroupName $(ParseParams.Output_rgname)
                $VMs = Get-AzVM -ResourceGroupName $(ParseParams.Output_rgname)
                $pend = Get-AzPrivateEndpoint -ResourceGroupName $(ParseParams.Output_rgname)
                $nicIds = $pend.NetworkInterfaces.id

                ForEach ($nicId in $nicIds){
                  $nic = Get-AzNetworkInterface -ResourceId $nicId
                  $VmPublicIpAddress.Add($nic.Tag.vm,$nic.IpConfigurations.PrivateIPAddress) 
                  }
                ForEach($VM in $VMs){
                  $vmnic = Get-aznetworkInterface -resourceId $vm[0].NetworkProfile.NetworkInterfaces[0].id
                  $vmhash = [PSCustomObject]@{
                      Name = $vm.Name
                      ProvisioningState = $vm.ProvisioningState
                      PublicIPAddress = $VmPublicIpAddress[$vm.Name]
                      PublicDNSName = $vm.Name + $dnszone
                      PrivateIPAddress = $vmnic.Ipconfigurations[0].PrivateIpAddress
                      }
                  $objVMs += $vmhash
                  }
                Write-Output $objVMs | ft
              azurePowerShellVersion: 'LatestVersion'

      - ${{ if eq(parameters.RunRegisterDNS, true) }}:
        - deployment: RegisterDNS
          dependsOn: ARMDeploy
          variables:
           guid: $[ dependencies.ARMDeploy.outputs['ParseParams.Output_guid'] ]
          displayName: "Register DNS Records"
          environment: 
           name: Dev
           resourceType: VirtualMachine
          strategy:
            runOnce:
              deploy:
                steps:
                - checkout: self
                - script: echo $(guid)

                - task: AzurePowerShell@5
                  inputs:
                    azureSubscription: 'MCT'
                    ScriptType: 'InlineScript'
                    Inline: |
                      Write-Output $(guid)
                      # Create DNS zone and Records onpremise
                      
                      $guid = '$(guid)'
                      $guidDNSZoneName = $guid + '${{ parameters.dnssuffix }}'

                      # file is required for stand-alone DNS server, not AD integrated
                      $guidDNSZoneFile = $guid + ".dns"
                      $rg = $guid + '.rg'
                      $VmPublicIpAddress = @{}   
                      $pend = Get-AzPrivateEndpoint -ResourceGroupName $rg
                      $nicIds = $pend.NetworkInterfaces.id
                      ForEach ($nicId in $nicIds){
                        $nic = Get-AzNetworkInterface -ResourceId $nicId
                        $VmPublicIpAddress.Add($nic.Tag.vm,$nic.IpConfigurations.PrivateIPAddress) 
                        }
                      Write-Output 'DNS Records to be created:'
                      Write-Output $VmPublicIpAddress
                      
                      $Zones = Get-DnsServerZone
                      $ZoneNames = $Zones.ZoneName
                      if ($ZoneNames.Contains($guidDNSZoneName) -eq $false){
                        Write-Output 'Creating DNS Zone'
                        Add-DnsServerPrimaryZone -Name $guidDNSZoneName -zonefile $guidDNSZoneFile
                        Write-Output 'Creating DNS Records'
                        $VmPublicIpAddress.keys | ForEach-Object{
                          Add-DnsServerResourceRecordA -ZoneName $guidDNSZoneName -Name $_ -IPv4Address $VmPublicIpAddress[$_] -computername localhost -CreatePtr
                          }
                        }
                      else {
                        Write-Output "Zone $guidDNSZoneName exists. Zone and records will not be created"    
                        }
                      
                      Start-Sleep -s 10
                      Write-Output 'Listing DNS records in zone Type:A'
                      Get-DnsServerResourceRecord -ZoneName $guidDNSZoneName -RRType A | format-Table
                    azurePowerShellVersion: 'LatestVersion'